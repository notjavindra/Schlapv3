-- Debug function to show notifications
local function debugNotify(title, content, duration)
    if game:GetService("UserInputService") then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = title,
            Text = content,
            Duration = duration or 5
        })
    end
    print("[DEBUG] " .. title .. ": " .. content)
end

-- Load WindUI
local Version = "1.6.31" -- Try 1.7.0 if 1.6.31 fails
local WindUI
local success, result = pcall(function()
    return loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()
end)

if not success or not result then
    debugNotify("WindUI Load Error", "Failed to load WindUI: " .. tostring(result))
    return
end

WindUI = result
debugNotify("WindUI Loaded", "WindUI version " .. Version .. " loaded successfully")

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character
local Humanoid

-- Wait for character with timeout
local startTime = tick()
local timeout = 10 -- seconds
while not Character and tick() - startTime < timeout do
    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
end

if Character then
    Humanoid = Character:WaitForChild("Humanoid", 5)
    debugNotify("Character Loaded", "Character and Humanoid initialized")
else
    debugNotify("Character Load Error", "Failed to load character within " .. timeout .. " seconds")
    return
end

local Workspace = game:GetService("Workspace")
-- Variables
local WalkSpeedValue, JumpPowerValue = 16, 50
local SpeedEnabled = false
local AutoSlapEnabled = false
local AutoSlapAuraEnabled = false
local SpinBotEnabled = false
local AntiVoidEnabled = false
local AntiRagdollEnabled = false
local PlayersESPEnabled = false
local UsersESPEnabled = false
local AntiVoidPart = nil
local SlapSpeed = 0.3 -- Delay between slap attempts
local LastSlapTime = 0 -- Debounce for slap activation
local LastTeleportTime = 0 -- Debounce for AntiVoid teleport
local TeleportDebounce = 1 -- Seconds between teleports
local AuraTargetIndex = 1 -- Current target index for aura
local LastAuraTime = 0 -- Debounce for aura switching
local AuraSwitchDelay = 2 -- Seconds before switching targets
local LastToolWarningTime = 0 -- Debounce for tool warning notifications
local ToolWarningCooldown = 5 -- Seconds between tool warnings
local ESPConnections = {} -- Store ESP connections for cleanup
-- Schlap Tools (Correct tool names for Schlap game)
local SchlapTools = {
    "Basic",
    "Charged",
    "Medic",
    "Toxic",
    "Jester",
    "Dracula",
    "Stone",
    "Gravity",
    "Gatling",
    "Velocity",
    "Lava",
    "Tsunami",
    "Godly",
    "Midas"
}
-- Create Window with WindUI
local Window
local success, err = pcall(function()
    Window = WindUI:CreateWindow({
        Title = "Schlap | Merqury Hub",
        Icon = "rbxassetid://4483345998",
        Author = "Merqury Hub",
        Folder = "SchlapConfig",
        Size = UDim2.fromOffset(580, 460),
        KeySystem = {
            Key = "MERQURYHUB_1.7",
            Note = "Enter the key to access Merqury Hub for Schlap",
            URL = "https://discord.gg/merquryhub", -- Replace with actual URL
            SaveKey = true
        },
        Transparent = true,
        Theme = "Dark",
        SideBarWidth = 170
    })
end)

if not success then
    debugNotify("Window Creation Error", "Failed to create WindUI window: " .. tostring(err))
    return
end

debugNotify("Window Created", "WindUI window created successfully")

-- Notification helper function (using WindUI if available)
local function showNotification(title, content, duration)
    local success, _ = pcall(function()
        WindUI:Notify({
            Title = title,
            Content = content,
            Duration = duration or 3
        })
    end)
    if not success then
        debugNotify(title, content, duration)
    end
end

-- === MAIN TAB ===
local mainTab = Window:Tab({
    Title = "Main",
    Icon = "rbxassetid://4483345998"
})
-- Auto Slap
local autoSlapToggle = mainTab:Toggle({
    Title = "Auto Slap",
    Description = "Automatically slaps nearby players",
    Default = false,
    Callback = function(state)
        AutoSlapEnabled = state
        if state then
            showNotification("Auto Slap", "Auto Slap enabled (supports all Schlap tools)")
        else
            showNotification("Auto Slap", "Auto Slap disabled")
        end
    end
})
-- Auto Slap Aura (Not Recommended)
local autoSlapAuraToggle = mainTab:Toggle({
    Title = "Auto Slap Aura (Not Recommended)",
    Description = "Teleports to players and slaps them",
    Default = false,
    Callback = function(state)
        AutoSlapAuraEnabled = state
        if state then
            AuraTargetIndex = 1
            showNotification("Auto Slap Aura", "⚠️ AURA ENABLED - Will teleport to players and slap them!", 5)
        else
            showNotification("Auto Slap Aura", "Auto Slap Aura disabled")
        end
    end
})
-- AntiVoid Toggle
local antiVoidToggle = mainTab:Toggle({
    Title = "Antivoid",
    Description = "Prevents falling into the void",
    Default = false,
    Callback = function(state)
        AntiVoidEnabled = state
        if state then
            -- Create AntiVoid Part
            if not AntiVoidPart then
                AntiVoidPart = Instance.new("Part")
                AntiVoidPart.Size = Vector3.new(5000, 1, 5000)
                AntiVoidPart.Position = Vector3.new(0, -200, 0)
                AntiVoidPart.Anchored = true
                AntiVoidPart.Transparency = 1
                AntiVoidPart.CanCollide = true
                AntiVoidPart.Parent = Workspace
                -- Touch event to teleport player
                AntiVoidPart.Touched:Connect(function(hit)
                    local player = Players:GetPlayerFromCharacter(hit.Parent)
                    if player and player == LocalPlayer then
                        local char = player.Character
                        if char and char:FindFirstChild("HumanoidRootPart") then
                            local currentTime = tick()
                            if currentTime - LastTeleportTime >= TeleportDebounce then
                                LastTeleportTime = currentTime
                                char.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-21.19, -49.709, 331.93), Vector3.new(0, 0, 0))
                                showNotification("AntiVoid", "Teleported to safe position!")
                            end
                        end
                    end
                end)
                showNotification("AntiVoid", "AntiVoid enabled")
            end
        else
            -- Remove AntiVoid Part
            if AntiVoidPart then
                AntiVoidPart:Destroy()
                AntiVoidPart = nil
                showNotification("AntiVoid", "AntiVoid disabled")
            end
        end
    end
})
-- AntiRagdoll Toggle
local antiRagdollToggle = mainTab:Toggle({
    Title = "AntiRagdoll",
    Description = "Prevents ragdoll physics",
    Default = false,
    Callback = function(state)
        AntiRagdollEnabled = state
        if state then
            showNotification("AntiRagdoll", "AntiRagdoll enabled")
        else
            showNotification("AntiRagdoll", "AntiRagdoll disabled")
        end
    end
})
-- === VISUAL TAB ===
local visualTab = Window:Tab({
    Title = "Visual",
    Icon = "rbxassetid://4483345998"
})
-- ESP Functions
local function createPlayerESP(player)
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
   
    local espBox = Instance.new("BoxHandleAdornment")
    espBox.Name = "PlayerESP_" .. player.Name
    espBox.Size = Vector3.new(4, 6, 1)
    espBox.Color3 = Color3.fromRGB(0, 162, 255) -- Blue
    espBox.Transparency = 0.7
    espBox.AlwaysOnTop = true
    espBox.ZIndex = 1
    espBox.Adornee = player.Character.HumanoidRootPart
    espBox.Parent = player.Character.HumanoidRootPart
   
    -- Store connection for cleanup
    if not ESPConnections[player.Name] then
        ESPConnections[player.Name] = {}
    end
    ESPConnections[player.Name].Players = espBox
end
local function createUsersESP()
    -- Look for NPCs/Bots in workspace
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj:FindFirstChild("HumanoidRootPart") and obj:FindFirstChild("Humanoid") then
            local isPlayer = false
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character == obj then
                    isPlayer = true
                    break
                end
            end
            if not isPlayer and (not ESPConnections[obj.Name] or not ESPConnections[obj.Name].Users) then
                local espBox = Instance.new("BoxHandleAdornment")
                espBox.Name = "UserESP_" .. obj.Name
                espBox.Size = Vector3.new(4, 6, 1)
                espBox.Color3 = Color3.fromRGB(255, 0, 0) -- Red
                espBox.Transparency = 0.7
                espBox.AlwaysOnTop = true
                espBox.ZIndex = 1
                espBox.Adornee = obj.HumanoidRootPart
                espBox.Parent = obj.HumanoidRootPart
                if not ESPConnections[obj.Name] then
                    ESPConnections[obj.Name] = {}
                end
                ESPConnections[obj.Name].Users = espBox
            end
        end
    end
end
local function removeAllESP(espType)
    for name, connections in pairs(ESPConnections) do
        if connections[espType] then
            connections[espType]:Destroy()
            connections[espType] = nil
        end
    end
end
-- Players ESP Toggle
local playersESPToggle = visualTab:Toggle({
    Title = "Players ESP (Blue)",
    Description = "Shows ESP for all players",
    Default = false,
    Callback = function(state)
        PlayersESPEnabled = state
        if state then
            -- Enable Players ESP
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    createPlayerESP(player)
                end
            end
            showNotification("Players ESP", "Players ESP enabled (Blue)")
        else
            -- Disable Players ESP
            removeAllESP("Players")
            showNotification("Players ESP", "Players ESP disabled")
        end
    end
})
-- Users ESP Toggle (NPCs/Bots)
local usersESPToggle = visualTab:Toggle({
    Title = "Users ESP (Red)",
    Description = "Shows ESP for NPCs/Bots",
    Default = false,
    Callback = function(state)
        UsersESPEnabled = state
        if state then
            -- Enable Users ESP for NPCs/Bots
            createUsersESP()
            showNotification("Users ESP", "Users ESP enabled (Red)")
        else
            -- Disable Users ESP
            removeAllESP("Users")
            showNotification("Users ESP", "Users ESP disabled")
        end
    end
})
-- === MISC TAB ===
local miscTab = Window:Tab({
    Title = "Misc",
    Icon = "rbxassetid://4483345998"
})
-- WalkSpeed Slider
local walkSpeedSlider = miscTab:Slider({
    Title = "WalkSpeed",
    Description = "Adjust your walking speed",
    Default = 16,
    Min = 16,
    Max = 200,
    Rounding = 0,
    Callback = function(value)
        WalkSpeedValue = value
        SpeedEnabled = true
        showNotification("WalkSpeed", "WalkSpeed set to " .. value)
    end
})
-- JumpPower Slider
local jumpPowerSlider = miscTab:Slider({
    Title = "JumpPower",
    Description = "Adjust your jump power",
    Default = 50,
    Min = 50,
    Max = 200,
    Rounding = 0,
    Callback = function(value)
        JumpPowerValue = value
        SpeedEnabled = true
        showNotification("JumpPower", "JumpPower set to " .. value)
    end
})
-- Rejoin Button
local rejoinButton = miscTab:Button({
    Title = "Rejoin",
    Description = "Rejoin the current server",
    Callback = function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
        showNotification("Rejoin", "Attempting to rejoin the server...")
    end
})
-- Server Hop Button
local serverHopButton = miscTab:Button({
    Title = "Server Hop",
    Description = "Join a different server",
    Callback = function()
        local Servers = {}
        local Success, Response = pcall(function()
            return game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")
        end)
        if Success then
            local Data = HttpService:JSONDecode(Response)
            for _, server in pairs(Data.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(Servers, server.id)
                end
            end
            if #Servers > 0 then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, Servers[math.random(1, #Servers)], LocalPlayer)
                showNotification("Server Hop", "Hopping to a new server...")
            else
                showNotification("Server Hop Failed", "No available servers found.")
            end
        else
            showNotification("Server Hop Failed", "Failed to fetch server list.")
        end
    end
})
-- Spin Bot Toggle
local spinBotToggle = miscTab:Toggle({
    Title = "Spin Bot",
    Description = "Makes your character spin continuously",
    Default = false,
    Callback = function(state)
        SpinBotEnabled = state
        if state then
            showNotification("Spin Bot", "Spin Bot enabled")
        else
            showNotification("Spin Bot", "Spin Bot disabled")
        end
    end
})
-- === RUN SERVICE ===
RunService.RenderStepped:Connect(function()
    -- Apply WalkSpeed/JumpPower
    if SpeedEnabled and Humanoid then
        Humanoid.WalkSpeed = WalkSpeedValue
        Humanoid.JumpPower = JumpPowerValue
    end
   
    -- Function to find any available Schlap tool
    local function findSchlapTool()
        for _, toolName in pairs(SchlapTools) do
            local tool = LocalPlayer.Backpack:FindFirstChild(toolName) or Character:FindFirstChild(toolName)
            if tool then
                return tool, toolName
            end
        end
        return nil, nil
    end
   
    -- Function to show tool warning with specific tool list
    local function showToolWarning()
        local currentTime = tick()
        if currentTime - LastToolWarningTime >= ToolWarningCooldown then
            LastToolWarningTime = currentTime
            local toolList = table.concat(SchlapTools, ", ")
            showNotification("⚠️ No Schlap Tool Found", "Please equip one of these tools: " .. toolList, 6)
        end
    end
   
    -- Auto Slap logic (normal)
    if AutoSlapEnabled and not AutoSlapAuraEnabled then
        local currentTime = tick()
        if currentTime - LastSlapTime >= SlapSpeed then
            LastSlapTime = currentTime
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and Character and Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance <= 10 then
                        local tool, toolName = findSchlapTool()
                        if tool and Humanoid and Humanoid.Health > 0 and Humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                            if tool.Parent ~= Character then
                                Humanoid:EquipTool(tool)
                                task.wait(0.3)
                            end
                            if tool:IsA("Tool") and tool.Parent == Character then
                                local success, err = pcall(function()
                                    tool:Activate()
                                end)
                                if not success then
                                    showNotification("Tool Activation Failed", "Error with " .. toolName .. ": " .. tostring(err))
                                end
                            end
                        else
                            showToolWarning()
                        end
                        break
                    end
                end
            end
        end
    end
   
    -- Auto Slap Aura logic (teleports to players)
    if AutoSlapAuraEnabled and Character and Character:FindFirstChild("HumanoidRootPart") then
        local currentTime = tick()
        if currentTime - LastAuraTime >= AuraSwitchDelay then
            LastAuraTime = currentTime
           
            local players = {}
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    table.insert(players, player)
                end
            end
           
            if #players > 0 then
                -- Cycle through players
                if AuraTargetIndex > #players then
                    AuraTargetIndex = 1
                end
               
                local targetPlayer = players[AuraTargetIndex]
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    -- Teleport to target player
                    local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                    Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(2, 0, 0))
                   
                    -- Try to slap with any available tool
                    local tool, toolName = findSchlapTool()
                    if tool and Humanoid and Humanoid.Health > 0 then
                        if tool.Parent ~= Character then
                            Humanoid:EquipTool(tool)
                            task.wait(0.1)
                        end
                        if tool:IsA("Tool") and tool.Parent == Character then
                            local success, err = pcall(function()
                                tool:Activate()
                            end)
                            if success then
                                showNotification("Aura Target", "Slapping " .. targetPlayer.Name .. " with " .. toolName, 1)
                            end
                        end
                    else
                        showToolWarning()
                    end
                   
                    -- Move to next target
                    AuraTargetIndex = AuraTargetIndex + 1
                end
            end
        end
    end
   
    -- Spin Bot logic
    if SpinBotEnabled and Character:FindFirstChild("HumanoidRootPart") then
        Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(15), 0)
    end
   
    -- AntiRagdoll logic
    if AntiRagdollEnabled and Humanoid then
        if Humanoid:GetState() == Enum.HumanoidStateType.Physics then
            Humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
        Humanoid.PlatformStand = false
    end
   
    -- Update ESP for new players
    if PlayersESPEnabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                if not ESPConnections[player.Name] or not ESPConnections[player.Name].Players then
                    createPlayerESP(player)
                end
            end
        end
    end
   
    -- Update ESP for users/NPCs
    if UsersESPEnabled then
        createUsersESP()
    end
end)
-- Handle new players joining
Players.PlayerAdded:Connect(function(player)
    if PlayersESPEnabled then
        player.CharacterAdded:Connect(function()
            task.wait(1) -- Wait for character to fully load
            createPlayerESP(player)
        end)
    end
end)
-- Handle players leaving
Players.PlayerRemoving:Connect(function(player)
    if ESPConnections[player.Name] then
        if ESPConnections[player.Name].Players then
            ESPConnections[player.Name].Players:Destroy()
        end
        ESPConnections[player.Name] = nil
    end
end)
-- Handle Character Respawn
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    Humanoid = newCharacter:WaitForChild("Humanoid", 5)
    if Humanoid then
        debugNotify("Character Respawn", "New character loaded")
        -- Reapply WalkSpeed/JumpPower if enabled
        if SpeedEnabled then
            Humanoid.WalkSpeed = WalkSpeedValue
            Humanoid.JumpPower = JumpPowerValue
        end
        -- Reapply AntiRagdoll if enabled
        if AntiRagdollEnabled then
            if Humanoid:GetState() == Enum.HumanoidStateType.Physics then
                Humanoid:ChangeState(Enum.HumanoidStateType.Running)
            end
            Humanoid.PlatformStand = false
        end
    else
        debugNotify("Character Respawn Error", "Failed to load Humanoid")
    end
end)

-- Debug: Confirm script execution
debugNotify("Script Executed", "Merqury Hub for Schlap fully loaded")
